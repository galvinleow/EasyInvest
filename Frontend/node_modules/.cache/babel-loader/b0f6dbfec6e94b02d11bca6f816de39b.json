{"ast":null,"code":"var _jsxFileName = \"/Users/zermainelew/Documents/orbital/Frontend/src/Asset/table.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { forwardRef } from \"react\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nexport default function MaterialTableDemo(props) {\n  const [assets, setAssets] = useState([]);\n  useEffect(() => {\n    fetch(\"http://0.0.0.0:5200/getDataFromUUID/asset/jerY83IB35d_ivospiSm\").then(response => response.json().then(data => {\n      setAssets(data.asset);\n    }));\n  }, []);\n  const tableIcons = {\n    Add: forwardRef((props, ref) => /*#__PURE__*/React.createElement(AddBox, Object.assign({}, props, {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 37\n      }\n    }))),\n    Check: forwardRef((props, ref) => /*#__PURE__*/React.createElement(Check, Object.assign({}, props, {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 39\n      }\n    }))),\n    Clear: forwardRef((props, ref) => /*#__PURE__*/React.createElement(Clear, Object.assign({}, props, {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 39\n      }\n    }))),\n    Delete: forwardRef((props, ref) => /*#__PURE__*/React.createElement(DeleteOutline, Object.assign({}, props, {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 40\n      }\n    }))),\n    DetailPanel: forwardRef((props, ref) => /*#__PURE__*/React.createElement(ChevronRight, Object.assign({}, props, {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }))),\n    Edit: forwardRef((props, ref) => /*#__PURE__*/React.createElement(Edit, Object.assign({}, props, {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 38\n      }\n    }))),\n    FirstPage: forwardRef((props, ref) => /*#__PURE__*/React.createElement(FirstPage, Object.assign({}, props, {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 43\n      }\n    }))),\n    LastPage: forwardRef((props, ref) => /*#__PURE__*/React.createElement(LastPage, Object.assign({}, props, {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 42\n      }\n    }))),\n    NextPage: forwardRef((props, ref) => /*#__PURE__*/React.createElement(ChevronRight, Object.assign({}, props, {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 42\n      }\n    }))),\n    PreviousPage: forwardRef((props, ref) => /*#__PURE__*/React.createElement(ChevronLeft, Object.assign({}, props, {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }))),\n    SortArrow: forwardRef((props, ref) => /*#__PURE__*/React.createElement(ArrowUpward, Object.assign({}, props, {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 43\n      }\n    }))),\n    ThirdStateCheck: forwardRef((props, ref) => /*#__PURE__*/React.createElement(Remove, Object.assign({}, props, {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }))),\n    ViewColumn: forwardRef((props, ref) => /*#__PURE__*/React.createElement(ViewColumn, Object.assign({}, props, {\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 44\n      }\n    })))\n  };\n  const [state, setState] = React.useState({\n    columns: [{\n      title: \"Asset Name\",\n      field: \"name\"\n    }, {\n      title: \"Interest Rate per annum (%)\",\n      field: \"interest\",\n      type: \"numeric\"\n    }, {\n      title: \"Current Value\",\n      field: \"value\",\n      type: \"numeric\"\n    }],\n    //to loop through database\n    data: []\n  });\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    icons: tableIcons,\n    title: \"My Assets\",\n    columns: state.columns,\n    data: state.data,\n    options: {\n      headerStyle: {\n        backgroundColor: \"royalblue\",\n        color: \"white\"\n      },\n      rowStyle: {\n        backgroundColor: \"#EEE\"\n      },\n      actionsColumnIndex: -1,\n      search: false\n    },\n    editable: {\n      onRowAddCancelled: rowData => console.log(\"Row adding cancelled\"),\n      onRowUpdateCancelled: rowData => console.log(\"Row editing cancelled\"),\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          //need to have a function that disallow a row to be added when one of the fields are empty\n          if (!newData.name | !newData.interest | !newData.value) {\n            alert(\"Fields cannot be empty! Please delete and add again!\");\n          }\n\n          resolve(); //to get added row after clicking add -> save\n\n          var raw = {\n            asset: [{\n              name: newData.name,\n              type: \"saving\",\n              rate: newData.interest,\n              amount: [{\n                value: newData.value,\n                date: new Date().toLocaleDateString()\n              }]\n            }]\n          };\n          const requestOptions = {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(raw),\n            redirect: \"follow\"\n          };\n          fetch(\"http://0.0.0.0:5200/addAsset/jerY83IB35d_ivospiSm\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log(\"error\", error));\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.push(newData);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve(); //to get edited row after clicking edit -> save\n\n          const raw = {\n            asset: [{\n              amount: [{\n                date: new Date().toLocaleDateString(),\n                value: \"1\"\n              }],\n              name: \"sc\",\n              rate: \"1\",\n              type: \"saving\",\n              uuid: \"3c575070-b771-11ea-979e-acde48001122\"\n            }]\n          };\n          const requestOptions = {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(raw),\n            redirect: \"follow\"\n          };\n          fetch(\"http://0.0.0.0:5200/updateAsset/jerY83IB35d_ivospiSm\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log(\"error\", error));\n          console.log(newData);\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve(); //to get deleted row after clicking delete -> save\n\n          var raw = {\n            asset: [{\n              amount: [{\n                date: \"11/03/2020\",\n                value: \"100000\"\n              }],\n              name: \"DBS\",\n              rate: \"5\",\n              type: \"saving\",\n              uuid: \"bcc33675-b770-11ea-9dc9-acde48001122\"\n            }]\n          };\n          var requestOptions = {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(raw),\n            redirect: \"follow\"\n          };\n          fetch(\"http://0.0.0.0:5200/deleteAsset/jerY83IB35d_ivospiSm\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log(\"error\", error));\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/zermainelew/Documents/orbital/Frontend/src/Asset/table.jsx"],"names":["React","useEffect","useState","MaterialTable","forwardRef","AddBox","ArrowUpward","Check","ChevronLeft","ChevronRight","Clear","DeleteOutline","Edit","FirstPage","LastPage","Remove","ViewColumn","MaterialTableDemo","props","assets","setAssets","fetch","then","response","json","data","asset","tableIcons","Add","ref","Delete","DetailPanel","NextPage","PreviousPage","SortArrow","ThirdStateCheck","state","setState","columns","title","field","type","headerStyle","backgroundColor","color","rowStyle","actionsColumnIndex","search","onRowAddCancelled","rowData","console","log","onRowUpdateCancelled","onRowAdd","newData","Promise","resolve","setTimeout","name","interest","value","alert","raw","rate","amount","date","Date","toLocaleDateString","requestOptions","method","headers","body","JSON","stringify","redirect","text","result","catch","error","prevState","push","onRowUpdate","oldData","uuid","indexOf","onRowDelete","splice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { forwardRef } from \"react\";\n\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\n\nexport default function MaterialTableDemo(props) {\n  const [assets, setAssets] = useState([]);\n  \n  useEffect(() => {\n    fetch(\n      \"http://0.0.0.0:5200/getDataFromUUID/asset/jerY83IB35d_ivospiSm\"\n    ).then((response) =>\n      response.json().then((data) => {\n        setAssets(data.asset);\n      })\n    );\n  }, []);\n\n  \n\n  const tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => (\n      <ChevronRight {...props} ref={ref} />\n    )),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => (\n      <ChevronLeft {...props} ref={ref} />\n    )),\n    SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => (\n      <Remove {...props} ref={ref} />\n    )),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n  };\n\n  const [state, setState] = React.useState({\n    columns: [\n      { title: \"Asset Name\", field: \"name\" },\n      {\n        title: \"Interest Rate per annum (%)\",\n        field: \"interest\",\n        type: \"numeric\",\n      },\n      { title: \"Current Value\", field: \"value\", type: \"numeric\" },\n    ],\n    //to loop through database\n    data: [],\n  });\n\n  return (\n    <MaterialTable\n      icons={tableIcons}\n      title=\"My Assets\"\n      columns={state.columns}\n      data={state.data}\n      options={{\n        headerStyle: {\n          backgroundColor: \"royalblue\",\n          color: \"white\",\n        },\n        rowStyle: {\n          backgroundColor: \"#EEE\",\n        },\n        actionsColumnIndex: -1,\n        search: false,\n      }}\n      editable={{\n        onRowAddCancelled: (rowData) => console.log(\"Row adding cancelled\"),\n        onRowUpdateCancelled: (rowData) => console.log(\"Row editing cancelled\"),\n        onRowAdd: (newData) =>\n          new Promise((resolve) => {\n            setTimeout(() => {\n              //need to have a function that disallow a row to be added when one of the fields are empty\n              if (!newData.name | !newData.interest | !newData.value) {\n                alert(\"Fields cannot be empty! Please delete and add again!\");\n              }\n              resolve();\n              //to get added row after clicking add -> save\n              var raw = {\n                asset: [\n                  {\n                    name: newData.name,\n                    type: \"saving\",\n                    rate: newData.interest,\n                    amount: [\n                      {\n                        value: newData.value,\n                        date: new Date().toLocaleDateString(),\n                      },\n                    ],\n                  },\n                ],\n              };\n\n              const requestOptions = {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(raw),\n                redirect: \"follow\",\n              };\n\n              fetch(\n                \"http://0.0.0.0:5200/addAsset/jerY83IB35d_ivospiSm\",\n                requestOptions\n              )\n                .then((response) => response.text())\n                .then((result) => console.log(result))\n                .catch((error) => console.log(\"error\", error));\n\n              setState((prevState) => {\n                const data = [...prevState.data];\n                data.push(newData);\n                return { ...prevState, data };\n              });\n            }, 600);\n          }),\n        onRowUpdate: (newData, oldData) =>\n          new Promise((resolve) => {\n            setTimeout(() => {\n              resolve();\n              //to get edited row after clicking edit -> save\n              const raw = {\n                asset: [\n                  {\n                    amount: [\n                      {\n                        date: new Date().toLocaleDateString(),\n                        value: \"1\",\n                      },\n                    ],\n                    name: \"sc\",\n                    rate: \"1\",\n                    type: \"saving\",\n                    uuid: \"3c575070-b771-11ea-979e-acde48001122\",\n                  },\n                ],\n              };\n\n              const requestOptions = {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(raw),\n                redirect: \"follow\",\n              };\n\n              fetch(\n                \"http://0.0.0.0:5200/updateAsset/jerY83IB35d_ivospiSm\",\n                requestOptions\n              )\n                .then((response) => response.text())\n                .then((result) => console.log(result))\n                .catch((error) => console.log(\"error\", error));\n\n              console.log(newData);\n              if (oldData) {\n                setState((prevState) => {\n                  const data = [...prevState.data];\n                  data[data.indexOf(oldData)] = newData;\n                  return { ...prevState, data };\n                });\n              }\n            }, 600);\n          }),\n        onRowDelete: (oldData) =>\n          new Promise((resolve) => {\n            setTimeout(() => {\n              resolve();\n              //to get deleted row after clicking delete -> save\n              var raw = {\n                asset: [\n                  {\n                    amount: [\n                      {\n                        date: \"11/03/2020\",\n                        value: \"100000\",\n                      },\n                    ],\n                    name: \"DBS\",\n                    rate: \"5\",\n                    type: \"saving\",\n                    uuid: \"bcc33675-b770-11ea-9dc9-acde48001122\",\n                  },\n                ],\n              };\n\n              var requestOptions = {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(raw),\n                redirect: \"follow\",\n              };\n\n              fetch(\n                \"http://0.0.0.0:5200/deleteAsset/jerY83IB35d_ivospiSm\",\n                requestOptions\n              )\n                .then((response) => response.text())\n                .then((result) => console.log(result))\n                .catch((error) => console.log(\"error\", error));\n\n              setState((prevState) => {\n                const data = [...prevState.data];\n                data.splice(data.indexOf(oldData), 1);\n                return { ...prevState, data };\n              });\n            }, 600);\n          }),\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}